"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var Rx_1 = require("rxjs/Rx");
require("rxjs/add/operator/do");
require("rxjs/add/operator/map");
var beer_1 = require("../models/beer");
var apiUrl = 'https://api.punkapi.com/v2/';
var PunkApiService = (function () {
    function PunkApiService(http) {
        this.http = http;
    }
    PunkApiService.prototype.list = function (params) {
        if (params === void 0) { params = {}; }
        var beersUrl = apiUrl + 'beers/?';
        Object.keys(params).map(function (key, index) {
            beersUrl += key + '=' + params[key] + '&';
        });
        return this.http.get(beersUrl)
            .map(function (response) { return response.json(); })
            .map(function (data) {
            var beerList = [];
            data.forEach(function (b) {
                beerList.push(new beer_1.Beer(b.id, b.name, b.tagline, b.description, b.image_url, b.abv, b.ibu, b.ebc));
            });
            return beerList;
        })
            .catch(this.handleErrors);
    };
    PunkApiService.prototype.detail = function (id) {
        var beersUrl = apiUrl + 'beers/' + id;
        return this.http.get(beersUrl)
            .map(function (response) { return response.json(); })
            .map(function (b) {
            b = b[0];
            return new beer_1.Beer(b.id, b.name, b.tagline, b.description, b.image_url, b.abv, b.ibu, b.ebc);
        })
            .catch(this.handleErrors);
    };
    PunkApiService.prototype.handleErrors = function (error) {
        return Rx_1.Observable.throw(JSON.stringify(error.json()));
    };
    return PunkApiService;
}());
PunkApiService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [http_1.Http])
], PunkApiService);
exports.PunkApiService = PunkApiService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVua2FwaS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicHVua2FwaS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQTJDO0FBQzNDLHNDQUF3RDtBQUN4RCw4QkFBcUM7QUFDckMsZ0NBQThCO0FBQzlCLGlDQUErQjtBQUUvQix1Q0FBcUM7QUFHckMsSUFBTSxNQUFNLEdBQUcsNkJBQTZCLENBQUM7QUFHN0MsSUFBYSxjQUFjO0lBSXZCLHdCQUFvQixJQUFTO1FBQVQsU0FBSSxHQUFKLElBQUksQ0FBSztJQUFHLENBQUM7SUFHakMsNkJBQUksR0FBSixVQUFLLE1BQW1CO1FBQW5CLHVCQUFBLEVBQUEsV0FBbUI7UUFFcEIsSUFBSSxRQUFRLEdBQUcsTUFBTSxHQUFHLFNBQVMsQ0FBQztRQUVsQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFDLEdBQUcsRUFBRSxLQUFLO1lBQy9CLFFBQVEsSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDOUMsQ0FBQyxDQUFDLENBQUM7UUFFSCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDO2FBQ3pCLEdBQUcsQ0FBQyxVQUFBLFFBQVEsSUFBTSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFBLENBQUMsQ0FBQyxDQUFDO2FBQzNDLEdBQUcsQ0FBQyxVQUFBLElBQUk7WUFDTCxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7WUFDbEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFBLENBQUM7Z0JBQ1YsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLFdBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ3RHLENBQUMsQ0FBQyxDQUFBO1lBRUYsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUNwQixDQUFDLENBQUM7YUFDRCxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFHRCwrQkFBTSxHQUFOLFVBQU8sRUFBVTtRQUViLElBQUksUUFBUSxHQUFHLE1BQU0sR0FBRyxRQUFRLEdBQUcsRUFBRSxDQUFFO1FBRXZDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUM7YUFDekIsR0FBRyxDQUFDLFVBQUEsUUFBUSxJQUFNLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUEsQ0FBQyxDQUFDLENBQUM7YUFDM0MsR0FBRyxDQUFDLFVBQUEsQ0FBQztZQUNGLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDVCxNQUFNLENBQUMsSUFBSSxXQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDOUYsQ0FBQyxDQUFDO2FBQ0QsS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBR0QscUNBQVksR0FBWixVQUFhLEtBQUs7UUFDZCxNQUFNLENBQUMsZUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDekQsQ0FBQztJQUlMLHFCQUFDO0FBQUQsQ0FBQyxBQWpERCxJQWlEQztBQWpEWSxjQUFjO0lBRDFCLGlCQUFVLEVBQUU7cUNBS2dCLFdBQUk7R0FKcEIsY0FBYyxDQWlEMUI7QUFqRFksd0NBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgSHR0cCwgSGVhZGVycywgUmVzcG9uc2UgfSBmcm9tIFwiQGFuZ3VsYXIvaHR0cFwiO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcInJ4anMvUnhcIjtcclxuaW1wb3J0IFwicnhqcy9hZGQvb3BlcmF0b3IvZG9cIjtcclxuaW1wb3J0IFwicnhqcy9hZGQvb3BlcmF0b3IvbWFwXCI7XHJcblxyXG5pbXBvcnQgeyBCZWVyIH0gZnJvbSAnLi4vbW9kZWxzL2JlZXInXHJcblxyXG5cclxuY29uc3QgYXBpVXJsID0gJ2h0dHBzOi8vYXBpLnB1bmthcGkuY29tL3YyLyc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBQdW5rQXBpU2VydmljZSB7XHJcblxyXG5cclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6SHR0cCkge31cclxuXHJcblxyXG4gICAgbGlzdChwYXJhbXM6IE9iamVjdCA9IHt9KSB7XHJcblxyXG4gICAgICAgIGxldCBiZWVyc1VybCA9IGFwaVVybCArICdiZWVycy8/JztcclxuXHJcbiAgICAgICAgT2JqZWN0LmtleXMocGFyYW1zKS5tYXAoKGtleSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgYmVlcnNVcmwgKz0ga2V5ICsgJz0nICsgcGFyYW1zW2tleV0gKyAnJic7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KGJlZXJzVXJsKVxyXG4gICAgICAgICAgICAubWFwKHJlc3BvbnNlID0+IHsgcmV0dXJuIHJlc3BvbnNlLmpzb24oKSB9KVxyXG4gICAgICAgICAgICAubWFwKGRhdGEgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IGJlZXJMaXN0ID0gW107XHJcbiAgICAgICAgICAgICAgICBkYXRhLmZvckVhY2goYiA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmVlckxpc3QucHVzaChuZXcgQmVlcihiLmlkLCBiLm5hbWUsIGIudGFnbGluZSwgYi5kZXNjcmlwdGlvbiwgYi5pbWFnZV91cmwsIGIuYWJ2LCBiLmlidSwgYi5lYmMpKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJlZXJMaXN0O1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2godGhpcy5oYW5kbGVFcnJvcnMpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBkZXRhaWwoaWQ6IG51bWJlcikge1xyXG5cclxuICAgICAgICBsZXQgYmVlcnNVcmwgPSBhcGlVcmwgKyAnYmVlcnMvJyArIGlkIDtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoYmVlcnNVcmwpXHJcbiAgICAgICAgICAgIC5tYXAocmVzcG9uc2UgPT4geyByZXR1cm4gcmVzcG9uc2UuanNvbigpIH0pXHJcbiAgICAgICAgICAgIC5tYXAoYiA9PiB7XHJcbiAgICAgICAgICAgICAgICBiID0gYlswXTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQmVlcihiLmlkLCBiLm5hbWUsIGIudGFnbGluZSwgYi5kZXNjcmlwdGlvbiwgYi5pbWFnZV91cmwsIGIuYWJ2LCBiLmlidSwgYi5lYmMpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2godGhpcy5oYW5kbGVFcnJvcnMpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBoYW5kbGVFcnJvcnMoZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS50aHJvdyhKU09OLnN0cmluZ2lmeShlcnJvci5qc29uKCkpKVxyXG4gICAgfVxyXG5cclxuXHJcblxyXG59Il19